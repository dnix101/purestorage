---
# (c) 2019, Remko Deenik (rdeenik@purestorage.com)
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
#
# Description:
# This ansible-playbook will create a volume copy on a remote array using protection groups
# It assumes the following:
# - a protection group has been created on the source array;
# - the target FlashArray is added to the protection group.
# The playbook will create a snapshot, which is replicated and copied to a new volume,
# after the copy the snapshots are removed from both the source and target.
#
# Change the 'vars:' section below with the correct IP address, API token for the source/target arrays
# and change the name of the source protectiongroup and source volume.
#
# The playbook uses jquery which requires jmespath, make sure these are installed
# use 'pip install jmespath' to install. This playbook requires Ansible version 2.9 to run.
#
- name: Create a remote copy of a volume using it's protection group
  hosts: localhost
  gather_facts: yes
  vars:
    fa_url_source: 10.10.1.1                                    # IP address of URL to source Cloud Block Storage/FlashArray
    fa_api_token_source: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx   # API token used for source Cloud Block Storage/FlashArray
    source_pg: protection-group-name                            # Protection group name
    source_vol: volume-group-name/volume-name                   # Volume name
    fa_url_target: 172.39.1.1                                   # IP address of URL to target Cloud Block Storage/FlashArray
    fa_api_token_target: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx   # API token used for target Cloud Block Storage/FlashArray
  tasks:
  - name: "Collect information of the source Pure Storage FlashArray ({{ fa_url_source }})"
    purefa_info:
      fa_url: "{{ fa_url_source }}"
      api_token: "{{ fa_api_token_source }}"
    register: array_info
  - set_fact:
      fa_host_source: "{{ array_info['purefa_info']['default']['array_name'] }}"
  - name: "Collect information of the target Pure Storage FlashArray ({{ fa_url_target }})"
    purefa_info:
      fa_url: "{{ fa_url_target }}"
      api_token: "{{ fa_api_token_target }}"
    register: array_info
  - set_fact:
      fa_host_target: "{{ array_info['purefa_info']['default']['array_name'] }}"
      snapshot_name: "{{ ansible_facts['date_time']['iso8601_basic_short'] }}"
  - debug: 
      msg: 
      - "Working with FlashArray {{ fa_host_source }} and {{ fa_host_target }} and using snapshot name {{ snapshot_name }}"
  - name: "Create and replicate snapshot on protection group {{ source_pg }}"
    purefa_pgsnap:
      name: "{{ source_pg }}"
      suffix: "{{ snapshot_name }}"
      state: present
      now: true
      apply_retention: true
      remote: true
      fa_url: "{{ fa_url_source }}"
      api_token: "{{ fa_api_token_source }}"
  - name: Wait until PG transfer is complete
    purefa_info:
      gather_subset: pgroups
      api_token: "{{ fa_api_token_target }}"
      fa_url: "{{ fa_url_target }}"
    register: array_info
    retries: 10
    delay: 5
    ignore_errors: true
    until: "array_info | json_query('purefa_info.pgroups.\"' + fa_host_source + ':' + source_pg + '\".snaps.\"' + fa_host_source + ':' + source_pg + '.' + snapshot_name + '\".progress') != 0.0"
  - name: "Creating volume group if required"
    purefa_vg:
      vgroup: "{{ source_vol.split('/')[0] }}"
      api_token: "{{ fa_api_token_target }}"
      fa_url: "{{ fa_url_target }}"
      state: present
    when: source_vol.find("/") != -1
  - name: "Restore volume from the snapshot on {{ fa_host_target }}"
    purefa_pgsnap:
      name: "{{ fa_host_source }}:{{ source_pg }}"
      suffix: "{{ snapshot_name }}"
      state: copy
      restore: "{{ source_vol }}"
      overwrite: true
      fa_url: "{{ fa_url_target }}"
      api_token: "{{ fa_api_token_target }}"
  - name: "Remove temporary snapshot from {{ fa_host_source }}"
    purefa_pgsnap:
      name: "{{ source_pg }}"
      suffix: "{{ snapshot_name }}"
      eradicate: true
      fa_url: "{{ fa_url_source }}"
      api_token: "{{ fa_api_token_source }}"
      state: absent
  - name: "Remove temporary snapshot from {{ fa_host_target }}"
    purefa_pgsnap:
      name: "{{ fa_host_source }}:{{ source_pg }}"
      suffix: "{{ snapshot_name }}"
      eradicate: true
      fa_url: "{{ fa_url_target }}"
      api_token: "{{ fa_api_token_target }}"
      state: absent